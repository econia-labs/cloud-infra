# cspell:word autoremove
# cspell:word imagetools
# cspell:word onlatest
# cspell:word pipx
# cspell:word toolsdirectory
---
env:
  BUILD_CONTEXT: '.'
  BUILD_FILE: 'src/aptos-cli/Dockerfile'
  DOCKER_REPO: 'econialabs/aptos-cli'
  GIT_TAG_PREFIX: 'aptos-cli'
jobs:
  build:
    needs: 'metadata'
    outputs:
      digest-amd64: >-
        ${{ matrix.arch == 'amd64' && steps.build.outputs.digest || '' }}
      digest-arm64: >-
        ${{ matrix.arch == 'arm64' && steps.build.outputs.digest || '' }}
    runs-on: '${{ matrix.runner }}'
    steps:
    - uses: 'actions/checkout@v4'
    - uses: 'docker/setup-buildx-action@v3'
    - uses: 'docker/login-action@v3'
      with:
        password: '${{ secrets.DOCKERHUB_TOKEN }}'
        username: '${{ secrets.DOCKERHUB_USERNAME }}'
    - name: 'Remove unused packages to free up runner disk space'
      # yamllint disable rule:indentation
      run: |
        sudo rm -rf \
          "$AGENT_TOOLSDIRECTORY" \
          /opt/google/chrome \
          /opt/microsoft/msedge \
          /opt/microsoft/powershell \
          /opt/pipx \
          /usr/lib/mono \
          /usr/local/julia* \
          /usr/local/lib/android \
          /usr/local/lib/node_modules \
          /usr/local/share/chromium \
          /usr/local/share/powershell \
          /usr/share/dotnet \
          /usr/share/swift
        sudo apt clean
        sudo apt autoremove -y
        df -h /
    # yamllint enable rule:indentation
    - name: 'Push ${{ matrix.arch }} image to Docker Hub'
      uses: 'docker/build-push-action@v6'
      with:
        build-args: 'CLI_VERSION=${{ needs.metadata.outputs.version }}'
        cache-from: 'type=gha'
        cache-to: 'type=gha,mode=max'
        context: '${{ env.BUILD_CONTEXT }}'
        file: '${{ env.BUILD_FILE }}'
        outputs: 'name=${{ env.DOCKER_REPO }},push-by-digest=true,type=image'
        platforms: 'linux/${{ matrix.arch }}'
        push: true
    strategy:
      matrix:
        include:
        - arch: 'amd64'
          runner: 'ubuntu-latest'
        - arch: 'arm64'
          runner: 'ubuntu-24.04-arm'
  create-manifest:
    needs:
    - 'build'
    - 'metadata'
    runs-on: 'ubuntu-latest'
    steps:
    - uses: 'docker/setup-buildx-action@v3'
    - uses: 'docker/login-action@v3'
      with:
        password: '${{ secrets.DOCKERHUB_TOKEN }}'
        username: '${{ secrets.DOCKERHUB_USERNAME }}'
    - id: 'metadata'
      uses: 'docker/metadata-action@v5'
      with:
        images: '${{ env.DOCKER_REPO }}'
        tags: 'type=match,pattern=${{ env.GIT_TAG_PREFIX }}-v(.*),group=1'
    - name: 'Create multi-architecture image manifest on Docker Hub'
      run: |
        TAG_ARGS=$(jq -cr '.tags | map("-t " + .) | join(" ")' \
        <<< '${{ needs.metadata.outputs.json }}')
        docker buildx imagetools create ${TAG_ARGS} \
        ${{ env.DOCKER_REPO }}@${{ needs.build.outputs.digest-amd64 }} \
        ${{ env.DOCKER_REPO }}@${{ needs.build.outputs.digest-arm64 }}
  metadata:
    outputs:
      json: '${{ steps.metadata.outputs.json }}'
      version: '${{ steps.metadata.outputs.version }}'
    runs-on: 'ubuntu-latest'
    steps:
    - id: 'metadata'
      name: 'Extract metadata from git tag or workflow_dispatch input'
      uses: 'docker/metadata-action@v5'
      with:
        images: '${{ env.DOCKER_REPO }}'
        # yamllint disable rule:empty-lines
        tags: >
          type=match,pattern=aptos-cli-v(.*),group=1,
          enable=${{ github.event_name == 'push' }}

          type=raw,value=${{ github.event.inputs.cli_version }},
          enable=${{ github.event_name == 'workflow_dispatch' }}
# yamllint enable rule:empty-lines
name: 'Push multi-platform aptos-cli image to Docker Hub'
'on':
  push:
    tags:
    - 'aptos-cli-v*'
  workflow_dispatch:
    inputs:
      cli_version:
        description: >-
          Aptos CLI version to build, for example, 6.0.2
        required: true
        type: 'string'
...
