# cspell:word autoremove
# cspell:word imagetools
# cspell:word onlatest
# cspell:word pipx
# cspell:word toolsdirectory
---
jobs:
  build-amd64:
    runs-on: 'ubuntu-latest'
    steps:
    - uses: 'actions/checkout@v4'
    - name: 'Remove unused packages to free up runner disk space'
      # yamllint disable rule:indentation
      run: |
        sudo rm -rf \
          "$AGENT_TOOLSDIRECTORY" \
          /opt/google/chrome \
          /opt/microsoft/msedge \
          /opt/microsoft/powershell \
          /opt/pipx \
          /usr/lib/mono \
          /usr/local/julia* \
          /usr/local/lib/android \
          /usr/local/lib/node_modules \
          /usr/local/share/chromium \
          /usr/local/share/powershell \
          /usr/share/dotnet \
          /usr/share/swift
        sudo apt clean
        sudo apt autoremove -y
        df -h /
      # yamllint enable rule:indentation
    - id: 'metadata'
      uses: 'docker/metadata-action@v5'
      with:
        images: 'econialabs/aptos-cli'
        # yamllint disable rule:empty-lines
        tags: >
          type=match,pattern=aptos-cli-v(.*),group=1,
          enable=${{ github.event_name == 'push' }}

          type=raw,value=${{ github.event.inputs.cli_version }},
          enable=${{ github.event_name == 'workflow_dispatch' }}
      # yamllint enable rule:empty-lines
    - uses: 'docker/setup-buildx-action@v3'
    - uses: 'docker/login-action@v3'
      with:
        password: '${{ secrets.DOCKERHUB_TOKEN }}'
        username: '${{ secrets.DOCKERHUB_USERNAME }}'
    - name: 'Push AMD image to Docker Hub'
      uses: 'docker/build-push-action@v6'
      with:
        build-args: |
          CLI_VERSION=${{ steps.metadata.outputs.version }}
        cache-from: 'type=gha'
        cache-to: 'type=gha,mode=max'
        context: '.'
        file: 'src/aptos-cli/Dockerfile'
        platforms: 'linux/amd64'
        push: true
        tags: '${{ steps.metadata.outputs.tags }}'
  build-arm64:
    runs-on: 'ubuntu-24.04-arm'
    steps:
    - uses: 'actions/checkout@v4'
    - name: 'Remove unused packages to free up runner disk space'
      # yamllint disable rule:indentation
      run: |
        sudo rm -rf \
          "$AGENT_TOOLSDIRECTORY" \
          /opt/google/chrome \
          /opt/microsoft/msedge \
          /opt/microsoft/powershell \
          /opt/pipx \
          /usr/lib/mono \
          /usr/local/julia* \
          /usr/local/lib/android \
          /usr/local/lib/node_modules \
          /usr/local/share/chromium \
          /usr/local/share/powershell \
          /usr/share/dotnet \
          /usr/share/swift
        sudo apt clean
        sudo apt autoremove -y
        df -h /
      # yamllint enable rule:indentation
    - id: 'metadata'
      uses: 'docker/metadata-action@v5'
      with:
        flavor: |
          suffix=-arm64,onlatest=true
        images: 'econialabs/aptos-cli'
        # yamllint disable rule:empty-lines
        tags: >
          type=match,pattern=aptos-cli-v(.*),group=1,
          enable=${{ github.event_name == 'push' }}

          type=raw,value=${{ github.event.inputs.cli_version }},
          enable=${{ github.event_name == 'workflow_dispatch' }}
      # yamllint enable rule:empty-lines
    - uses: 'docker/setup-buildx-action@v3'
    - uses: 'docker/login-action@v3'
      with:
        password: '${{ secrets.DOCKERHUB_TOKEN }}'
        username: '${{ secrets.DOCKERHUB_USERNAME }}'
    - name: 'Push ARM image to Docker Hub'
      uses: 'docker/build-push-action@v6'
      with:
        build-args: |
          CLI_VERSION=${{ steps.metadata.outputs.version }}
        cache-from: 'type=gha'
        cache-to: 'type=gha,mode=max'
        context: '.'
        file: 'src/aptos-cli/Dockerfile'
        platforms: 'linux/arm64'
        push: true
        tags: '${{ steps.metadata.outputs.tags }}'
  update-manifest:
    needs:
    - 'build-amd64'
    - 'build-arm64'
    runs-on: 'ubuntu-latest'
    steps:
    - uses: 'docker/setup-buildx-action@v3'
    - uses: 'docker/login-action@v3'
      with:
        password: '${{ secrets.DOCKERHUB_TOKEN }}'
        username: '${{ secrets.DOCKERHUB_USERNAME }}'
    - name: 'Append ARM images to AMD manifest'
      run: |
        echo "${{ needs.build-amd64.outputs.tags }}" | while read -r tag; do
        if [ ! -z "$tag" ]; then
        docker buildx imagetools create --append -t "$tag" "${tag}-arm64"
        fi
        done
name: 'Build the aptos-cli Docker image and push to Docker Hub'
'on':
  push:
    tags:
    - 'aptos-cli-v*'
  workflow_dispatch:
    inputs:
      cli_version:
        description: >-
          Aptos CLI version to build, for example, 4.0.0
        required: true
        type: 'string'
...
