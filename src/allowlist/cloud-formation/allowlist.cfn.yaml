---
Mappings:
  Subnets:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
    C:
      AvailabilityZone: 2
      CidrBlock: '10.0.3.0/24'
Parameters:
  StackName:
    Type: 'String'
Resources:
  # Security group for ECS containers.
  ContainerSecurityGroup:
    Properties:
      GroupDescription: 'ECS container security group'
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        FromPort: 6379
        IpProtocol: 'tcp'
        ToPort: 6379
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  # A subnet for each availability zone in the VPC region.
  Fn::ForEach::Subnet:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - Subnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'Subnets'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'Subnets'
        - Ref: 'Identifier'
        - 'CidrBlock'
        VpcId: !Ref 'VPC'
      Type: 'AWS::EC2::Subnet'
  # Ingress security group for Redis, allowing access from ECS tasks.
  RedisIngressSecurityGroup:
    Properties:
      GroupDescription: 'VPC ingress access to Redis cluster'
      SecurityGroupIngress:
      - FromPort: 6379
        IpProtocol: 'tcp'
        SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'
        ToPort: 6379
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  # A group containing all VPC subnets.
  SubnetGroup:
    Properties:
      SubnetGroupName: !Sub '${StackName}-subnet-group'
      SubnetIds:
      - !Ref 'SubnetA'
      - !Ref 'SubnetB'
      - !Ref 'SubnetC'
    Type: 'AWS::MemoryDB::SubnetGroup'
  # Virtual private cloud for isolated networking.
  VPC:
    Properties:
      CidrBlock: '10.0.0.0/16'
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
