---
Mappings:
  PublicSubnet:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
Resources:
  Fn::ForEach::PublicSubnet:
  - 'Identifier'
  - - 'A'
    - 'B'
  - PublicSubnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'PublicSubnet'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'PublicSubnet'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: true
        VpcId: !Ref 'VPC'
      Type: 'AWS::EC2::Subnet'
  Fn::ForEach::PublicSubnetRouteTableAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
  - PublicSubnetRouteTableAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'PublicRouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'PublicSubnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  GatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::VPCGatewayAttachment'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  PublicLoadBalancer:
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref 'PublicLoadBalancerSecurityGroup'
      Subnets:
      - !Ref 'PublicSubnetA'
      - !Ref 'PublicSubnetB'
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  PublicLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: 'Access to the public facing load balancer'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  PublicRoute:
    DependsOn: 'GatewayAttachment'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: 'AWS::EC2::Route'
  PublicRouteTable:
    Properties:
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::RouteTable'
  Redis:
    DependsOn: 'RedisACL'
    Properties:
      ACLName: 'redis'
      ClusterName: 'redis'
      NodeType: 'db.t4g.small'
    Type: 'AWS::MemoryDB::Cluster'
  RedisACL:
    Properties:
      ACLName: 'redis'
    Type: 'AWS::MemoryDB::ACL'
  VPC:
    Properties:
      CidrBlock: '10.0.0.0/16'
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
