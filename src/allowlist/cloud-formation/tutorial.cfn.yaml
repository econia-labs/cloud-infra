---
Mappings:
  PublicSubnet:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
Resources:
  DummyTargetGroupPublic:
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: '/'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: 'no-op'
      Port: 80
      Protocol: 'HTTP'
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
  ECSRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - 'sts:AssumeRole'
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ecs-tasks.amazonaws.com'
      Path: '/'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - 'ec2:AttachNetworkInterface'
            - 'ec2:CreateNetworkInterface'
            - 'ec2:CreateNetworkInterfacePermission'
            - 'ec2:DeleteNetworkInterface'
            - 'ec2:DeleteNetworkInterfacePermission'
            - 'ec2:Describe*'
            - 'ec2:DetachNetworkInterface'
            - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
            - 'elasticloadbalancing:DeregisterTargets'
            - 'elasticloadbalancing:Describe*'
            - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
            - 'elasticloadbalancing:RegisterTargets'
            Effect: 'Allow'
            Resource: '*'
        PolicyName: 'ecs-service'
    Type: 'AWS::IAM::Role'
  ECSSecurityGroup:
    Properties:
      GroupDescription: 'Access to the ECS containers'
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  ECSSecurityGroupIngressFromPublicALB:
    Properties:
      Description: 'Ingress from the public application load balancer'
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  ECSSecurityGroupIngressFromSelf:
    Properties:
      Description: 'Ingress from other containers in the same security group'
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'ECSSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  ECSTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - 'sts:AssumeRole'
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ecs-tasks.amazonaws.com'
      Path: '/'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Effect: 'Allow'
            Resource: '*'
        PolicyName: 'AmazonECSTaskExecutionRolePolicy'
    Type: 'AWS::IAM::Role'
  Fn::ForEach::PublicSubnet:
  - 'Identifier'
  - - 'A'
    - 'B'
  - PublicSubnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'PublicSubnet'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'PublicSubnet'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: true
        VpcId: !Ref 'VPC'
      Type: 'AWS::EC2::Subnet'
  Fn::ForEach::PublicSubnetRouteTableAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
  - PublicSubnetRouteTableAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'PublicRouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'PublicSubnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  GatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::VPCGatewayAttachment'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  PublicLoadBalancer:
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref 'PublicLoadBalancerSecurityGroup'
      Subnets:
      - !Ref 'PublicSubnetA'
      - !Ref 'PublicSubnetB'
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  PublicLoadBalancerListener:
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
        Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: 'HTTP'
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  PublicLoadBalancerSecurityGroup:
    Properties:
      GroupDescription: 'Access to the public facing load balancer'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  PublicRoute:
    DependsOn: 'GatewayAttachment'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: 'AWS::EC2::Route'
  PublicRouteTable:
    Properties:
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::RouteTable'
  RedisACL:
    Properties:
      ACLName: 'redis'
    Type: 'AWS::MemoryDB::ACL'
  VPC:
    Properties:
      CidrBlock: '10.0.0.0/16'
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
