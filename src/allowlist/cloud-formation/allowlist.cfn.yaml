---
Mappings:
  Subnets:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
Parameters:
  ContainerName:
    Default: 'allowlist-server-container'
    Type: 'String'
  ContainerPort:
    Default: 3000
    Type: 'Number'
  ImageVersion:
    Type: 'String'
  LoadBalancerListenerPort:
    Default: 80
    Type: 'Number'
  StackName:
    Type: 'String'
Resources:
  # Cluster for running ECS containers.
  # ContainerCluster:
  #   Type: 'AWS::ECS::Cluster'
  # ECS task definition for the allowlist server.
  ContainerDefinition:
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: 'REDIS_URL'
          Value: !Sub 'redis://${RedisCluster.ClusterEndpoint.Address}'
        - Name: 'SERVER_URL'
          Value: !Sub '0.0.0.0:${ContainerPort}'
        Image: !Sub 'econialabs/allowlist:${ImageVersion}'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub '/ecs/${StackName}'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'ecs'
        Name: !Ref 'ContainerName'
        PortMappings:
        - ContainerPort: !Ref 'ContainerPort'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ContainerRole.Arn'
      Family: 'AllowlistTask'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
      - 'FARGATE'
    Type: 'AWS::ECS::TaskDefinition'
  # Log group for ECS task logging.
  ContainerLogGroup:
    Properties:
      LogGroupName: !Sub '/ecs/${StackName}'
      RetentionInDays: 14
    Type: 'AWS::Logs::LogGroup'
  # Role with assorted permissions required to run the server container.
  ContainerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: 'Allow'
          Principal:
            Service: 'ecs-tasks.amazonaws.com'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'ecr:BatchCheckLayerAvailability'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Effect: 'Allow'
            Resource: '*'
        PolicyName: !Sub 'ContainerRolePolicy-${StackName}'
    Type: 'AWS::IAM::Role'
  # ECS service for running the allowlist server container.
  # ContainerRunner:
  #   DependsOn:
  #   - 'LoadBalancerListener'
  #   Properties:
  #     Cluster: !Ref 'ContainerCluster'
  #     LaunchType: 'FARGATE'
  #     LoadBalancers:
  #     - ContainerName: !Ref 'ContainerName'
  #       ContainerPort: !Ref 'ContainerPort'
  #       TargetGroupArn: !Ref 'ContainerTargetGroup'
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: 'ENABLED'
  #         SecurityGroups:
  #         - !Ref 'ContainerSecurityGroup'
  #         Subnets:
  #         - !Ref 'SubnetA'
  #         - !Ref 'SubnetB'
  #     TaskDefinition: !Ref 'ContainerDefinition'
  #   Type: 'AWS::ECS::Service'
  # Security group for ECS containers.
  ContainerSecurityGroup:
    Properties:
      GroupDescription: 'ECS container security group'
      # Allow all outbound traffic, to Redis and to Docker Hub.
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  # Container security group ingress rule permitting traffic from the load
  # balancer on the container port, defined separately from security group to
  # avoid circular dependencies with the load balancer security group.
  ContainerSecurityGroupIngress:
    Properties:
      FromPort: !Ref 'ContainerPort'
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: 'tcp'
      SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      ToPort: !Ref 'ContainerPort'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Target group for the load balancer, forwarding traffic to ECS containers.
  ContainerTargetGroup:
    DependsOn:
    - 'LoadBalancer'
    Properties:
      # Query address 0 as a proxy for health check.
      HealthCheckPath: '/0'
      Port: !Ref 'ContainerPort'
      Protocol: 'HTTP'
      TargetType: 'ip'
      VpcId: !Ref 'VPC'
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  # A subnet for the first two availability zones in the VPC region.
  Fn::ForEach::Subnet:
  - 'Identifier'
  - - 'A'
    - 'B'
  - Subnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'Subnets'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'Subnets'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: true
        VpcId: !Ref 'VPC'
      Type: 'AWS::EC2::Subnet'
  # An outbound internet traffic route association for each subnet.
  Fn::ForEach::SubnetOutboundGatewayRouteAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
  - SubnetOutboundGatewayRouteAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'RouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'Subnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # Internet gateway attachment for the VPC.
  GatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::VPCGatewayAttachment'
  # Route for outbound internet traffic through the internet gateway.
  GatewayOutboundRoute:
    DependsOn: 'GatewayAttachment'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'RouteTable'
    Type: 'AWS::EC2::Route'
  # Internet gateway for the VPC.
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  # Application load balancer for public access.
  LoadBalancer:
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref 'LoadBalancerSecurityGroup'
      Subnets:
      - !Ref 'SubnetA'
      - !Ref 'SubnetB'
      Type: 'application'
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  # Listener for the load balancer, forwards traffic to container target group.
  LoadBalancerListener:
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref 'ContainerTargetGroup'
        Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: !Ref 'LoadBalancerListenerPort'
      Protocol: 'HTTP'
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  # Security group for the load balancer.
  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: 'Security group for the load balancer'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'ContainerSecurityGroup'
        FromPort: !Ref 'ContainerPort'
        IpProtocol: 'tcp'
        ToPort: !Ref 'ContainerPort'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        FromPort: !Ref 'LoadBalancerListenerPort'
        IpProtocol: 'tcp'
        ToPort: !Ref 'LoadBalancerListenerPort'
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  # Redis database cluster.
  RedisCluster:
    Properties:
      # Base ACL provided by AWS granting open access to the cluster (for any
      # traffic permitted by the ingress security group).
      ACLName: 'open-access'
      ClusterName: !Ref 'StackName'
      NodeType: 'db.t4g.small'
      # A single shard with one replica, straddling the first two availability
      # zones in the subnet group.
      NumReplicasPerShard: 1
      NumShards: 1
      SecurityGroupIds:
      - !Ref 'RedisIngressSecurityGroup'
      SubnetGroupName: !Ref 'SubnetGroup'
      TLSEnabled: false
    Type: 'AWS::MemoryDB::Cluster'
  # Ingress security group for Redis, allowing access from ECS tasks only.
  RedisIngressSecurityGroup:
    Properties:
      GroupDescription: 'VPC ingress access to Redis cluster'
      SecurityGroupIngress:
      # Allow inbound TCP traffic on any port, since containers use ephemeral
      # ports for communication.
      - FromPort: 0
        IpProtocol: 'tcp'
        SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'
        ToPort: 65535
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::SecurityGroup'
  # Route table for the VPC.
  RouteTable:
    Properties:
      VpcId: !Ref 'VPC'
    Type: 'AWS::EC2::RouteTable'
  # A group containing all VPC subnets to be accessible for Redis.
  SubnetGroup:
    Properties:
      SubnetGroupName: !Sub '${StackName}-subnet-group'
      SubnetIds:
      - !Ref 'SubnetA'
      - !Ref 'SubnetB'
    Type: 'AWS::MemoryDB::SubnetGroup'
  # Virtual private cloud for internal networking.
  VPC:
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
